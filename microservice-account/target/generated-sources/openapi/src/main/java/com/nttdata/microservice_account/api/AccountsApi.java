/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.microservice_account.api;

import com.nttdata.microservice_account.model.AccountRequest;
import com.nttdata.microservice_account.model.AccountResponse;
import com.nttdata.microservice_account.model.VipAccountRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-11T11:26:26.684334100-05:00[America/Lima]")
@Validated
@Api(value = "accounts", description = "the accounts API")
public interface AccountsApi {

    default AccountsApiDelegate getDelegate() {
        return new AccountsApiDelegate() {};
    }

    /**
     * POST /accounts : Create a new account
     *
     * @param accountRequest  (required)
     * @return Account created (status code 201)
     *         or Invalid input (status code 400)
     */
    @ApiOperation(value = "Create a new account", nickname = "createAccount", notes = "", response = AccountResponse.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Account created", response = AccountResponse.class),
        @ApiResponse(code = 400, message = "Invalid input", response = String.class) })
    @PostMapping(
        value = "/accounts",
        produces = { "application/json", "text/plain" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccountResponse> createAccount(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AccountRequest accountRequest) {
        return getDelegate().createAccount(accountRequest);
    }


    /**
     * POST /accounts/mype : Create a new mype account
     *
     * @param vipAccountRequest  (required)
     * @return Account created (status code 201)
     *         or Invalid input (status code 400)
     */
    @ApiOperation(value = "Create a new mype account", nickname = "createMypeAccount", notes = "", response = AccountResponse.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Account created", response = AccountResponse.class),
        @ApiResponse(code = 400, message = "Invalid input", response = String.class) })
    @PostMapping(
        value = "/accounts/mype",
        produces = { "application/json", "text/plain" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccountResponse> createMypeAccount(@ApiParam(value = "" ,required=true )  @Valid @RequestBody VipAccountRequest vipAccountRequest) {
        return getDelegate().createMypeAccount(vipAccountRequest);
    }


    /**
     * POST /accounts/vip : Create a new vip account
     *
     * @param vipAccountRequest  (required)
     * @return Account created (status code 201)
     *         or Invalid input (status code 400)
     */
    @ApiOperation(value = "Create a new vip account", nickname = "createVipAccount", notes = "", response = AccountResponse.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Account created", response = AccountResponse.class),
        @ApiResponse(code = 400, message = "Invalid input", response = String.class) })
    @PostMapping(
        value = "/accounts/vip",
        produces = { "application/json", "text/plain" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccountResponse> createVipAccount(@ApiParam(value = "" ,required=true )  @Valid @RequestBody VipAccountRequest vipAccountRequest) {
        return getDelegate().createVipAccount(vipAccountRequest);
    }


    /**
     * DELETE /accounts/{accountNumber} : Delete an account by ID
     *
     * @param accountNumber  (required)
     * @return No content (status code 204)
     *         or Invalid ID supplied (status code 400)
     *         or Account not found (status code 404)
     */
    @ApiOperation(value = "Delete an account by ID", nickname = "deleteAccountById", notes = "", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Account not found") })
    @DeleteMapping(
        value = "/accounts/{accountNumber}"
    )
    default ResponseEntity<Void> deleteAccountById(@ApiParam(value = "",required=true) @PathVariable("accountNumber") String accountNumber) {
        return getDelegate().deleteAccountById(accountNumber);
    }


    /**
     * GET /accounts/{accountNumber} : Find account by ID
     *
     * @param accountNumber ID of account to return (required)
     * @return Operation successful (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Account not found (status code 404)
     */
    @ApiOperation(value = "Find account by ID", nickname = "findAccountById", notes = "", response = AccountResponse.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operation successful", response = AccountResponse.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Account not found") })
    @GetMapping(
        value = "/accounts/{accountNumber}",
        produces = { "application/json" }
    )
    default ResponseEntity<AccountResponse> findAccountById(@ApiParam(value = "ID of account to return",required=true) @PathVariable("accountNumber") String accountNumber) {
        return getDelegate().findAccountById(accountNumber);
    }


    /**
     * GET /accounts : Get all accounts
     *
     * @return Successful Operation (status code 200)
     */
    @ApiOperation(value = "Get all accounts", nickname = "getAccounts", notes = "", response = AccountResponse.class, responseContainer = "List", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = AccountResponse.class, responseContainer = "List") })
    @GetMapping(
        value = "/accounts",
        produces = { "application/json" }
    )
    default ResponseEntity<List<AccountResponse>> getAccounts() {
        return getDelegate().getAccounts();
    }


    /**
     * GET /accounts/client/{id} : Find all accounts of a client
     *
     * @param id ID of account to return (required)
     * @return Operation successful (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Account not found (status code 404)
     */
    @ApiOperation(value = "Find all accounts of a client", nickname = "getAccountsOfClient", notes = "", response = AccountResponse.class, responseContainer = "List", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operation successful", response = AccountResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Account not found") })
    @GetMapping(
        value = "/accounts/client/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<AccountResponse>> getAccountsOfClient(@ApiParam(value = "ID of account to return",required=true) @PathVariable("id") List<String> id) {
        return getDelegate().getAccountsOfClient(id);
    }

}
