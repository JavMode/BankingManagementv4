/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.microservice_transaction.api;

import com.nttdata.microservice_transaction.model.TransactionRequest;
import com.nttdata.microservice_transaction.model.TransactionResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-21T11:58:34.060029300-05:00[America/Lima]")
@Validated
@Api(value = "transactions", description = "the transactions API")
public interface TransactionsApi {

    default TransactionsApiDelegate getDelegate() {
        return new TransactionsApiDelegate() {};
    }

    /**
     * POST /transactions/credit/consumption/{accountNumber} : Register a transaction
     *
     * @param accountNumber account number of transaction to return (required)
     * @param transactionRequest  (required)
     * @return Transaction registered (status code 201)
     *         or Invalid input (status code 400)
     */
    @ApiOperation(value = "Register a transaction", nickname = "consumptionCredit", notes = "", response = TransactionResponse.class, tags={ "transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Transaction registered", response = TransactionResponse.class),
        @ApiResponse(code = 400, message = "Invalid input") })
    @PostMapping(
        value = "/transactions/credit/consumption/{accountNumber}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionResponse> consumptionCredit(@ApiParam(value = "account number of transaction to return",required=true) @PathVariable("accountNumber") String accountNumber,@ApiParam(value = "" ,required=true )  @Valid @RequestBody TransactionRequest transactionRequest) {
        return getDelegate().consumptionCredit(accountNumber, transactionRequest);
    }


    /**
     * POST /transactions/account/deposit/{accountNumber} : Register a transaction
     *
     * @param accountNumber account number of transaction to return (required)
     * @param transactionRequest  (required)
     * @return Transaction registered (status code 201)
     *         or Invalid input (status code 400)
     */
    @ApiOperation(value = "Register a transaction", nickname = "depositAccount", notes = "", response = TransactionResponse.class, tags={ "transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Transaction registered", response = TransactionResponse.class),
        @ApiResponse(code = 400, message = "Invalid input") })
    @PostMapping(
        value = "/transactions/account/deposit/{accountNumber}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionResponse> depositAccount(@ApiParam(value = "account number of transaction to return",required=true) @PathVariable("accountNumber") String accountNumber,@ApiParam(value = "" ,required=true )  @Valid @RequestBody TransactionRequest transactionRequest) {
        return getDelegate().depositAccount(accountNumber, transactionRequest);
    }


    /**
     * GET /transactions/{id} : Find transaction by ID
     *
     * @param id ID of transaction to return (required)
     * @return Operation successful (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Credit not found (status code 404)
     */
    @ApiOperation(value = "Find transaction by ID", nickname = "findTransactionById", notes = "", response = TransactionResponse.class, tags={ "transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operation successful", response = TransactionResponse.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Credit not found") })
    @GetMapping(
        value = "/transactions/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<TransactionResponse> findTransactionById(@ApiParam(value = "ID of transaction to return",required=true) @PathVariable("id") String id) {
        return getDelegate().findTransactionById(id);
    }


    /**
     * POST /transactions/credit/payment/{accountNumber} : Register a transaction
     *
     * @param accountNumber account number of transaction to return (required)
     * @param transactionRequest  (required)
     * @return Transaction registered (status code 201)
     *         or Invalid input (status code 400)
     */
    @ApiOperation(value = "Register a transaction", nickname = "paymentCredit", notes = "", response = TransactionResponse.class, tags={ "transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Transaction registered", response = TransactionResponse.class),
        @ApiResponse(code = 400, message = "Invalid input") })
    @PostMapping(
        value = "/transactions/credit/payment/{accountNumber}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionResponse> paymentCredit(@ApiParam(value = "account number of transaction to return",required=true) @PathVariable("accountNumber") String accountNumber,@ApiParam(value = "" ,required=true )  @Valid @RequestBody TransactionRequest transactionRequest) {
        return getDelegate().paymentCredit(accountNumber, transactionRequest);
    }


    /**
     * POST /transactions/account/withdraw/{accountNumber} : Register a transaction
     *
     * @param accountNumber account number of transaction to return (required)
     * @param transactionRequest  (required)
     * @return Transaction registered (status code 201)
     *         or Invalid input (status code 400)
     */
    @ApiOperation(value = "Register a transaction", nickname = "withdrawAccount", notes = "", response = TransactionResponse.class, tags={ "transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Transaction registered", response = TransactionResponse.class),
        @ApiResponse(code = 400, message = "Invalid input") })
    @PostMapping(
        value = "/transactions/account/withdraw/{accountNumber}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionResponse> withdrawAccount(@ApiParam(value = "account number of transaction to return",required=true) @PathVariable("accountNumber") String accountNumber,@ApiParam(value = "" ,required=true )  @Valid @RequestBody TransactionRequest transactionRequest) {
        return getDelegate().withdrawAccount(accountNumber, transactionRequest);
    }

}
